# =======================================================
# CONFIGURAÇÃO DO BANCO DE DADOS (SUPABASE)
# =======================================================
# Driver do PostgreSQL
spring.profiles.active=dev
spring.datasource.driver-class-name=org.postgresql.Driver

# URL de conexão com o Supabase Pooler (modo Transaction) e parâmetros de correção
spring.datasource.url=${SUPABASE_DB_URL}

# Configurações do Pool de Conexões (Hikari) para ser compatível com o Supabase
spring.datasource.hikari.maximum-pool-size=2
spring.datasource.hikari.minimum-idle=2


# =======================================================
# CONFIGURAÇÃO DO JPA/HIBERNATE
# =======================================================
# Valida o schema do banco de dados contra as entidades ao iniciar
spring.jpa.hibernate.ddl-auto=update

# Propriedades para debug do SQL gerado pelo Hibernate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# O dialeto é detectado automaticamente, mas pode ser especificado se necessário
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Propriedade útil para LOBs (bytea) no PostgreSQL
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true


# =======================================================
# CONFIGURAÇÃO DE SEGURANÇA E JWT
# =======================================================
# Credenciais para segurança básica em memória (se aplicável)
spring.security.user.name=user
spring.security.user.password=user

# Segredo para a assinatura do token JWT
jwt.secret=${JWT_SECRET}
# Tempo de expiração do token em milissegundos (ex: 7 dias)
jwt.expiration=604800000 


# =======================================================
# CONFIGURAÇÃO DE UPLOAD DE ARQUIVOS
# =======================================================
file.upload-dir=./uploads
spring.servlet.multipart.max-file-size=500MB
spring.servlet.multipart.max-request-size=500MB
spring.web.resources.static-locations=file:./uploads/


# =======================================================
# CONFIGURAÇÃO DE SERVIÇOS (SWAGGER, GEMINI)
# =======================================================
# Habilita a documentação da API com Swagger/OpenAPI
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true

# Credenciais da API do Gemini
gemini.api.key=${GEMINI_API_KEY}
gemini.api.baseurl=https://generativelanguage.googleapis.com/v1beta
gemini.api.model=gemini-2.0-flash


# =======================================================
# CONFIGURAÇÃO DE LOGS
# =======================================================
# Aumenta o nível de log do Spring Security para depuração
logging.level.org.springframework.security=DEBUG